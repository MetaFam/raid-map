{"version":3,"sources":["CircleFor.jsx","assets/starfield.svg","Earth.jsx","RaidMap.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["source","template","r","style","id","useState","data","setData","load","useCallback","a","fetch","res","json","useEffect","input","Array","arc","Math","PI","length","map","datum","i","dx","cos","dy","sin","className","transform","size","land","water","svgRef","useRef","pad","projection","geoOrthographic","scale","translate","clipAngle","path","geoPath","λ","scaleLinear","domain","range","svg","select","current","attr","append","feature","World","objects","setInterval","rotate","selectAll","ref","viewBox","join","_hover","fill","circle","floodOpacity","floodColor","result","in","in2","operator","stdDeviation","width","height","Background","x","y","Starfield","aria-label","Text","chakra","PlayerBase","idx","username","displayName","color","href","stroke","text","d","strokeWidth","fontSize","textAnchor","paintOrder","Player","overrides","props","Object","assign","TroubledCircle","baseFrequency","numOctaves","type","xChannelSelector","attributeName","values","begin","dur","end","repeatCount","filter","HazyCircle","opacity","offset","stopColor","stopOpacity","RaidBase","name","sides","points","_","slice","p","split","part","preserveAspectRatio","_first","transitionProperty","transitionDelay","Earth","CircleFor","strokeDasharray","strokeLinecap","pointerEvents","Raid","RaidMap","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"qQAGe,cAER,IADLA,EACI,EADJA,OAAQC,EACJ,EADIA,SACJ,IADcC,SACd,MADkB,GAClB,EADsBC,EACtB,EADsBA,MAAOC,EAC7B,EAD6BA,GAC7B,EACoBC,qBADpB,mBACGC,EADH,KACSC,EADT,KAEEC,EAAOC,sBAAW,sBAAC,4BAAAC,EAAA,sEACLC,MAAMX,GADD,cACjBY,EADiB,YAEvBL,EAFuB,SAETK,EAAIC,OAFK,6EAGtB,CAACb,IAEJc,qBAAU,WAAQN,MAAU,CAACA,IAE7B,IAAIO,EAAQT,EACRS,IACFA,EAAQ,IAAIC,MAAM,IAClBf,EAAW,kBAAM,cAAC,IAAD,MAGnB,IAAMgB,EAAM,EAAIC,KAAKC,GAAKJ,EAAMK,OAEhC,OACE,oBAAShB,KAAT,UACE,wBAAcF,IAAGC,UAChBY,EAAMM,KAAI,SAACC,EAAOC,GACjB,IAAMC,EAAKtB,EAAIgB,KAAKO,IAAIR,EAAMM,GACxBG,EAAKxB,EAAIgB,KAAKS,IAAIV,EAAMM,GAC9B,OACE,mBAEEK,UAAU,WACVC,UAAS,oBAAeL,EAAf,aAAsBE,EAAtB,KAHX,SAKGzB,EAASqB,IAJLC,UC9BF,MAA0B,sC,0CCO1B,cAGR,IAAD,IAFJO,YAEI,MAFG,IAEH,MADJC,YACI,MADG,QACH,MADYC,aACZ,MADoB,OACpB,EACEC,EAASC,mBACTC,EAAa,GAAPL,EAsDZ,OApDAhB,qBAAU,WACR,IAAMsB,EACJC,cACCC,MAAMR,EAAO,GACbS,UAAU,CAACT,EAAO,EAAGA,EAAO,IAC5BU,UAAU,IAEPC,EACJC,cACCN,WAAWA,GAERO,EACJC,cACCC,OAAO,CAAC,EAAGf,IACXgB,MAAM,EAAE,IAAK,MAOVC,GAJJH,cACCC,OAAO,CAAC,EAAGf,IACXgB,MAAM,CAAC,IAAK,KAGbE,YAAOf,EAAOgB,SACbC,KAAK,QAASpB,GACdoB,KAAK,SAAUpB,IAGlBiB,EAAII,OAAO,UACVD,KAAK,IAAKpB,EAAO,GACjBoB,KAAK,SAAU,cAEhBH,EAAII,OAAO,UACVD,KAAK,IAAKpB,EAAO,GACjBoB,KAAK,OAAQlB,GAEde,EAAII,OAAO,QACV7B,MAAM8B,YAAQC,EAAOA,EAAMC,QAAQvB,OACnCmB,KAAK,YAFN,qBAEiCpB,EAAO,EAFxC,cAE+CA,EAAO,EAFtD,MAGCoB,KAAK,QAAS,QACdA,KAAK,IAAKT,GACVS,KAAK,OAAQnB,GAEd,IACIkB,EAAU,EAMdM,aALiB,WACfN,GAAW,EACXb,EAAWoB,OAAO,CAACb,EAAEM,GAAU,IAC/BF,EAAIU,UAAU,QAAQP,KAAK,IAAKT,KALd,OAQnB,CAACX,EAAME,EAAOD,IAGf,mBACEF,UAAS,qBACOC,EAAO,EADd,cACqBA,EAAO,EAD5B,KADX,SAKE,cAAC,IAAOiB,IAAR,CACEW,IAAKzB,EACL0B,QAAS,EACN7B,EAAO,EAAIK,GAAML,EAAO,EAAIK,EAC7BL,EAAO,EAAIK,EAAKL,EAAO,EAAIK,GAC3ByB,KAAK,KACPC,OAAQ,CACNpB,KAAM,CAAEqB,KAAM,UACdC,OAAQ,CAAED,KAAM,SARpB,SAWE,+BACE,yBAAQ1D,GAAG,OAAX,UACE,yBACE4D,aAAa,MACbC,WAAW,QACXC,OAAO,UAET,6BACEC,GAAG,QACHC,IAAI,gBACJC,SAAS,KACTH,OAAO,cAET,gCACEC,GAAG,YACHG,aAAa,KACbJ,OAAO,SAET,6BACEC,GAAG,gBACHC,IAAI,OACJC,SAAS,mBCnGR,cAAqC,IAAD,IAAjCE,aAAiC,MAAzB,KAAyB,MAAnBC,cAAmB,MAAV,IAAU,EAC3CC,EAAa,kBACjB,+BACEC,GAAIH,EAAQ,EAAGI,GAAIH,EAAS,EACtBD,QAAOC,SAFf,SAIE,wBACQD,QAAOC,SACblE,KAAMsE,EACNC,aAAW,kBAKXC,EAAOC,YAAO,QAEdC,EAAa,SAAC,EAEjBC,GAFgB,IACjBC,EADiB,EACjBA,SADiB,IACPC,mBADO,MACOD,EADP,MACiBE,aADjB,MACyB,SADzB,SAGjB,eAAC,IAAD,CAEExD,UAAU,SACVyD,KAAI,mCAC0BH,GAE9BrB,OAAQ,CACNpB,KAAM,CAAE6C,OAAQ,OAChBC,KAAM,CAAEzB,KAAM,WARlB,UAWE,sBACE0B,EAAE,sBACF1B,KAAK,cAAcwB,OAAQF,EAC3BK,YAAa,IAEf,cAACX,EAAD,CACEpD,GAAI,GACJgE,SAAU,GACVC,WAAW,SACX7B,KAAK,QACLwB,OAAO,QACPG,YAAa,EACbG,WAAW,SAPb,SASGT,MAxBEA,IA4BHU,EAAS,SAAC,GAAD,IAAMC,EAAN,2BACb,gBAAMC,EAAN,2BACE,cAACf,EAAD,eAAgBgB,OAAOC,OACrB,GAAIF,EAAOD,OAKXI,EAAiB,SAAC,GAAD,QAAGhG,SAAH,MAAO,GAAP,EAAc6F,EAAd,4BACrB,oBAAGnE,UAAU,WAAb,UACE,+BACE,yBAAQxB,GAAG,WAAX,UACE,8BACE+F,cAAc,OACdC,WAAW,IACXC,KAAK,eACLnC,OAAO,WAET,mCACE5B,MAAM,KACN4B,OAAO,YACPoC,iBAAiB,IACjBnC,GAAG,gBACHC,IAAI,SALN,SAOE,yBACEmC,cAAc,QACdC,OAAO,qBACPC,MAAM,qBACNC,IAAI,KACJC,IAAI,oBACJC,YAAY,iBAGhB,6BACEzC,GAAG,gBACHE,SAAS,OACTD,IAAI,mBAIV,gDACEhE,GAAG,YADL,aAEQF,KAAM6F,IAFd,IAGEc,OAAO,iBAHT,SAKE,kCACEN,cAAc,YACdF,KAAK,SACLG,OAAO,SACPC,MAAM,YACNC,IAAI,MACJC,IAAI,WACJC,YAAY,sBAMdE,EAAa,SAAC,GAAD,QACjB5G,SADiB,MACb,GADa,MACT4D,YADS,MACF,OADE,MACMiD,eADN,MACgB,IADhB,EACyBhB,EADzB,6CAGjB,oBAAGnE,UAAU,OAAb,UACE,+BACE,iCAAgBxB,GAAG,OAAnB,UACE,sBAAM4G,OAAO,KAAKC,UAAU,gBAC5B,sBAAMD,OAAO,MAAMC,UAAU,gBAC7B,sBAAMD,OAAO,MAAMC,UAAWnD,EAAMoD,YAAaH,IACjD,sBAAMC,OAAO,MAAMC,UAAWnD,EAAMoD,YAAaH,IACjD,sBAAMC,OAAO,OAAOC,UAAU,qBAGlC,+DAAc/G,KAAM6F,IAApB,IAA6BjC,KAAK,oBAIhCqD,EAAW,SAAC,GAEX,IAAD,IADJC,YACI,MADG,KACH,MADSC,aACT,MADiB,EACjB,MADoBnH,SACpB,MADwB,GACxB,EAD+B6F,EAC/B,oCACE9E,EAAM,EAAIC,KAAKC,GAAKkG,EACpBC,EACJ,YAAI,IAAItG,MAAMqG,IACbhG,KAAI,SAACkG,EAAGhG,GAAJ,MAAW,CACdmD,EAAGxE,EAAIgB,KAAKO,IAAIF,EAAIN,GACpB0D,EAAGzE,EAAIgB,KAAKS,IAAIJ,EAAIN,OAGxB,OACE,oBAAGW,UAAU,OAAb,UACE,kCACE4D,EACE,WAAI8B,EAAO,GAAG5C,EAAd,YAAmB4C,EAAO,GAAG3C,GAC3B2C,EAAOE,MAAM,GAAGnG,KAChB,SAAAoG,GAAC,iBAAQA,EAAE/C,EAAV,YAAe+C,EAAE9C,MAElB,KAEAoB,IAEN,cAACjB,EAAD,CACEY,SAAU,GACVC,WAAW,SACX7B,KAAK,QACLwB,OAAO,QACPG,YAAa,EACbG,WAAW,SANb,SAQGwB,EAAKM,MAAM,MAAMrG,KAAI,SAACsG,EAAMpG,GAAP,OACpB,uBAEEmD,EAAG,EAAGC,EAAO,KAAJzE,EAAW,GAAKqB,EAF3B,SAIGoG,GAHIpG,YAkBjB,OACE,eAAC,IAAOwB,IAAR,CACEY,QAAS,EACNY,EAAQ,GAAIC,EAAS,EACtBD,EAAOC,GACPZ,KAAK,KACPgE,oBAAoB,gBACpBC,OAAQ,CAAE,IAAK,CACbC,mBAAoB,cACpBC,gBAAiB,SARrB,UAWE,cAACtD,EAAD,IACA,cAAC,IAAD,CAAMY,KAAK,iBAAX,SACE,cAAC2C,EAAD,CAAOlG,KAAM,IAAKC,KAAK,QAAQC,MAAM,WAEvC,cAACiG,EAAD,CACE7H,GAAG,QACHJ,OAAO,oBACPG,MAAO,CACL2D,KAAM,OACNwB,OAAQ,YACRG,YAAa,EACbyC,gBAAiB,MACjBC,cAAe,SAEjBjI,EAAG,IACHD,SAAU4F,EAAO,CAAET,MAAO,aAE5B,cAAC6C,EAAD,CACE7H,GAAG,SACHJ,OAAO,qBACPG,MAAO,CACL2D,KAAM,OACNwB,OAAQ,SACRG,YAAa,EACbyC,gBAAiB,MACjBC,cAAe,SAEjBjI,EAAG,IACHD,SAAU4F,EAAO,CAAET,MAAO,WAE5B,cAACc,EAAD,CACEpC,KAAK,OAAOwB,OAAO,MAAMG,YAAa,EACtCvF,EAAG,MAEL,cAAC4G,EAAD,CACE5G,EAAG,IAAK4D,KAAK,QACbsE,cAAc,SAEhB,cAACH,EAAD,CACE7H,GAAG,QACHJ,OAAO,aACPG,MAAO,CACL2D,KAAM,OACNwB,OAAQ,QAEVpF,EAAG,IACHD,SAlEO,SAAC,GAAD,IAAM6F,EAAN,2BACX,gBAAMC,EAAN,2BACE,cAACoB,EAAD,eAAcnB,OAAOC,OACnB,GAAIF,EAAOD,MA+DDuC,CAAK,CACblI,MAAO,CACL2D,KAAM,SACNwB,OAAQ,SACRG,YAAa,EACbyC,gBAAiB,eChPd,oBACb,cAACI,EAAD,KCQaC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAD,MAEFC,SAASC,eAAe,SAM1Bd,K","file":"static/js/main.c38e7f04.chunk.js","sourcesContent":["import { useState, useEffect, useCallback } from 'react'\nimport { Spinner } from '@chakra-ui/react'\n\nexport default ({\n  source, template, r = 50, style, id,\n}) => {\n  const [data, setData] = useState()\n  const load = useCallback(async () => {\n    const res = await fetch(source)\n    setData(await res.json())\n  }, [source])\n\n  useEffect(() => { load() }, [load])\n\n  let input = data\n  if(!input) {\n    input = new Array(10)\n    template = () => <Spinner/>\n  }\n\n  const arc = 2 * Math.PI / input.length\n\n  return (\n    <g {...{ id }}>\n      <circle {...{ r, style }}/>\n      {input.map((datum, i) => {\n        const dx = r * Math.cos(arc * i)\n        const dy = r * Math.sin(arc * i)\n        return (\n          <g\n            key={i}\n            className=\"position\"\n            transform={`translate(${dx}, ${dy})`}\n          >\n            {template(datum)}\n          </g>\n        )\n      })}\n    </g>\n  )\n}  ","export default __webpack_public_path__ + \"static/media/starfield.810b868c.svg\";","import { select, scaleLinear } from 'd3'\nimport World from './assets/world.json'\nimport { geoPath, geoOrthographic } from 'd3-geo'\nimport { feature } from 'topojson'\nimport { useEffect, useRef } from 'react'\nimport { chakra } from '@chakra-ui/react'\n\nexport default ({\n  size = 400,\n  land = 'green', water = 'blue',\n}) => {\n  const svgRef = useRef()\n  const pad = size * 0.5 // amount to pad the viewBox\n\n  useEffect(() => {\n    const projection = (\n      geoOrthographic()\n      .scale(size / 2)\n      .translate([size / 2, size / 2])\n      .clipAngle(90)\n    )\n    const path = (\n      geoPath()\n      .projection(projection)\n    )\n    const λ = (\n      scaleLinear()\n      .domain([0, size])\n      .range([-180, 180])\n    )\n    const φ = (\n      scaleLinear()\n      .domain([0, size])\n      .range([90, -90])\n    )\n    const svg = (\n      select(svgRef.current)\n      .attr('width', size)\n      .attr('height', size)\n    )\n\n    svg.append('circle')\n    .attr('r', size / 2)\n    .attr('filter', 'url(#glow)')\n\n    svg.append('circle')\n    .attr('r', size / 2)\n    .attr('fill', water)\n\n    svg.append('path')\n    .datum(feature(World, World.objects.land))\n    .attr('transform', `translate(-${size / 2}, -${size / 2})`)\n    .attr('class', 'land')\n    .attr('d', path)\n    .attr('fill', land)\n\n    const scrollSpeed = 100\n    let current = 0\n    const bgscroll = () => {\n      current += 1\n      projection.rotate([λ(current), 0])\n      svg.selectAll('path').attr('d', path)\n    }\n    setInterval(bgscroll, scrollSpeed)\n  }, [size, water, land])\n\n  return (\n    <g\n      transform={\n        `translate(-${size / 2}, -${size / 2})`\n      }\n    >\n      <chakra.svg\n        ref={svgRef}\n        viewBox={[\n          -size / 2 - pad, -size / 2 - pad,\n          size + 2 * pad, size + 2 * pad,\n        ].join(' ')}\n        _hover={{\n          path: { fill: 'purple' },\n          circle: { fill: '#111' },\n        }}\n      >\n        <defs>\n          <filter id=\"glow\">\n            <feFlood\n              floodOpacity=\"0.8\"\n              floodColor=\"white\"\n              result=\"flood\"\n            />\n            <feComposite\n              in=\"flood\"\n              in2=\"SourceGraphic\"\n              operator=\"in\"\n              result=\"composite\"\n            />\n            <feGaussianBlur\n              in=\"composite\"\n              stdDeviation=\"14\"\n              result=\"blur\"\n            />\n            <feComposite\n              in=\"SourceGraphic\"\n              in2=\"blur\"\n              operator=\"over\"\n            />\n          </filter>\n        </defs>\n      </chakra.svg>\n    </g>\n  )\n}","import { chakra, Link } from '@chakra-ui/react'\nimport CircleFor from './CircleFor'\nimport Starfield from './assets/starfield.svg'\nimport Earth from './Earth'\n\nexport default ({ width = 1280, height = 960 }) => {\n  const Background = () => (\n    <foreignObject\n      x={-width / 2} y={-height / 2}\n      {...{ width, height }}\n    >\n      <object\n        {...{ width, height }}\n        data={Starfield}\n        aria-label=\"background\"\n      />\n    </foreignObject>\n  )\n\n  const Text = chakra('text')\n\n  const PlayerBase = ({\n    username, displayName = username, color = 'purple'\n  }, idx) => (\n    <Link\n      key={displayName}\n      className=\"player\"\n      href={\n        `//my.metagame.wtf/player/${username}`\n      }\n      _hover={{\n        path: { stroke: 'red' },\n        text: { fill: 'yellow' },\n      }}\n    >\n      <path\n        d='m-7,5 h14 l-7,-15 z'\n        fill=\"transparent\" stroke={color}\n        strokeWidth={2}\n      />\n      <Text\n        dy={19}\n        fontSize={10}\n        textAnchor=\"middle\"\n        fill=\"white\"\n        stroke=\"black\"\n        strokeWidth={1}\n        paintOrder=\"stroke\"\n      >\n        {displayName}\n      </Text>\n    </Link>\n  )\n  const Player = ({ ...overrides }) => (\n    ({ ...props }) => (\n      <PlayerBase {...Object.assign(\n        {}, props, overrides\n      )}/>\n    )\n  )\n\n  const TroubledCircle = ({ r = 50, ...props }) => (\n    <g className='troubled'>\n      <defs>\n        <filter id=\"heatwave\">\n          <feTurbulence\n            baseFrequency=\"0.05\"\n            numOctaves=\"5\"\n            type=\"fractalNoise\"\n            result=\"tumult\"\n          />\n          <feDisplacementMap\n            scale=\"25\"\n            result=\"displaced\"\n            xChannelSelector=\"R\"\n            in=\"SourceGraphic\"\n            in2=\"tumult\"\n          >\n            <animate\n              attributeName=\"scale\"\n              values=\"25; 15; 20; 35; 20\"\n              begin=\"troubled.mouseover\"\n              dur=\"1s\"\n              end=\"troubled.mouseout\"\n              repeatCount=\"indefinite\"\n            />\n          </feDisplacementMap>\n          <feComposite\n            in=\"SourceGraphic\"\n            operator=\"atop\"\n            in2=\"displaced\"\n          />\n        </filter>\n      </defs>\n      <circle\n        id=\"troubled\"\n        {...{ r, ...props }}\n        filter=\"url(#heatwave)\"\n      >\n        <animateTransform\n          attributeName=\"transform\"\n          type=\"rotate\"\n          values=\"0; 360\"\n          begin=\"mouseover\"\n          dur=\"10s\"\n          end=\"mouseout\"\n          repeatCount=\"indefinite\"\n        />\n      </circle>\n    </g>\n  )\n\n  const HazyCircle = ({\n    r = 50, fill = 'blue', opacity = 0.75, ...props\n  }) => (\n    <g className=\"hazy\">\n      <defs>\n        <radialGradient id=\"haze\">\n          <stop offset=\"0%\" stopColor=\"transparent\"/>\n          <stop offset=\"80%\" stopColor=\"transparent\"/>\n          <stop offset=\"87%\" stopColor={fill} stopOpacity={opacity}/>\n          <stop offset=\"93%\" stopColor={fill} stopOpacity={opacity}/>\n          <stop offset=\"100%\" stopColor=\"transparent\"/>\n        </radialGradient>\n      </defs>\n      <circle {...{ r, ...props }} fill=\"url(#haze)\"/>\n    </g>\n  ) \n\n  const RaidBase = ({\n    name = null, sides = 6, r = 25, ...props\n  }) => {\n    const arc = 2 * Math.PI / sides\n    const points = (\n      [...new Array(sides)]\n      .map((_, i) => ({\n        x: r * Math.cos(i * arc),\n        y: r * Math.sin(i * arc),\n      }))\n    )\n    return (\n      <g className=\"raid\">\n        <path\n          d={\n            `m${points[0].x},${points[0].y}`\n            + points.slice(1).map(\n              p => `L${p.x},${p.y}`\n            )\n            + 'z'\n          }\n          {...props}\n        />\n        <Text\n          fontSize={18}\n          textAnchor=\"middle\"\n          fill=\"white\"\n          stroke=\"black\"\n          strokeWidth={2}\n          paintOrder=\"stroke\"\n        >\n          {name.split(\"\\n\").map((part, i) => (\n            <tspan\n              key={i}\n              x={0} y={r * 1.75 + 18 * i}\n            >\n              {part}\n            </tspan>\n          ))}\n        </Text>\n      </g>\n    )\n  }\n  const Raid = ({ ...overrides }) => (\n    ({ ...props }) => (\n      <RaidBase {...Object.assign(\n        {}, props, overrides\n      )}/>\n    )\n  )\n\n  return (\n    <chakra.svg\n      viewBox={[\n        -width / 2, -height / 2,\n        width, height,\n      ].join(' ')}\n      preserveAspectRatio=\"xMidYMid meet\"\n      _first={{ '*': {\n        transitionProperty: 'fill stroke',\n        transitionDelay: '0.5s',\n      } }}\n    >\n      <Background/>\n      <Link href=\"//metagame.wtf\">\n        <Earth size={275} land=\"green\" water=\"blue\"/>\n      </Link>\n      <CircleFor\n        id=\"inner\"\n        source=\"inner-circle.json\"\n        style={{\n          fill: 'none',\n          stroke: 'lightblue',\n          strokeWidth: 2,\n          strokeDasharray: '7 5',\n          strokeLinecap: 'round',\n        }}\n        r={100}\n        template={Player({ color: 'purple' })}\n      />\n      <CircleFor\n        id=\"middle\"\n        source=\"middle-circle.json\"\n        style={{\n          fill: 'none',\n          stroke: 'purple',\n          strokeWidth: 2,\n          strokeDasharray: '1 4',\n          strokeLinecap: 'round',\n        }}\n        r={150}\n        template={Player({ color: 'lime' })}\n      />\n      <TroubledCircle\n        fill=\"none\" stroke=\"red\" strokeWidth={5}\n        r={220}\n      />\n      <HazyCircle\n        r={390} fill=\"green\"\n        pointerEvents=\"none\"\n      />\n      <CircleFor\n        id=\"raids\"\n        source=\"raids.json\"\n        style={{\n          fill: 'none',\n          stroke: 'none',\n        }}\n        r={350}\n        template={Raid({\n          style: {\n            fill: 'yellow',\n            stroke: 'orange',\n            strokeWidth: 4,\n            strokeDasharray: '3 6',\n          }\n        })}\n      />\n    </chakra.svg>\n  )\n}","//import DynamicSVG from './DynamicSVG'\nimport RaidMap from './RaidMap'\n\nexport default () => (\n  <RaidMap/>\n)","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}