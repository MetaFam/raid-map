{"version":3,"sources":["CircleFor.jsx","assets/starfield.svg","Earth.jsx","RaidMap.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["source","template","r","style","id","useState","data","setData","load","useCallback","a","fetch","res","json","useEffect","input","Array","arc","Math","PI","length","map","datum","i","dx","cos","dy","sin","transform","size","land","water","svgRef","useRef","pad","projection","geoOrthographic","scale","translate","clipAngle","path","geoPath","λ","scaleLinear","domain","range","svg","select","current","attr","append","feature","World","objects","setInterval","rotate","selectAll","ref","viewBox","join","_hover","fill","circle","flood-opacity","flood-color","result","in","in2","operator","stdDeviation","width","height","Background","x","y","Starfield","aria-label","Text","chakra","maxH","maxW","Earth","CircleFor","stroke","strokeWidth","strokeDasharray","strokeLinecap","idx","username","displayName","href","text","d","fontSize","textAnchor","paintOrder","RaidMap","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.cfbeda99.chunk.js","sourcesContent":["import { useState, useEffect, useCallback } from 'react'\nimport { Spinner } from '@chakra-ui/react'\n\nexport default ({\n  source, template, r = 50, style, id,\n}) => {\n  const [data, setData] = useState()\n  const load = useCallback(async () => {\n    const res = await fetch(source)\n    setData(await res.json())\n  }, [source])\n\n  useEffect(() => { load() }, [load])\n\n  let input = data\n  if(!input) {\n    input = new Array(10)\n    template = () => <Spinner/>\n  }\n\n  const arc = 2 * Math.PI / input.length\n\n  return (\n    <g {...{ id }}>[\n      <circle {...{ r, style }}/>\n      {input.map((datum, i) => {\n        const dx = r * Math.cos(arc * i)\n        const dy = r * Math.sin(arc * i)\n        return (\n          <g\n            key={i}\n            transform={`translate(${dx}, ${dy})`}\n          >\n            {template(datum)}\n          </g>\n        )\n      })}\n    </g>\n  )\n}  ","export default __webpack_public_path__ + \"static/media/starfield.cfdcce70.svg\";","import { select, scaleLinear } from 'd3'\nimport World from './assets/world.json'\nimport { geoPath, geoOrthographic } from 'd3-geo'\nimport { feature } from 'topojson'\nimport { useEffect, useRef } from 'react'\nimport { chakra } from '@chakra-ui/react'\n\nexport default ({\n  size = 400,\n  land = 'green', water = 'blue',\n}) => {\n  const svgRef = useRef()\n  const pad = size * 0.5 // amount to pad the viewBox\n\n  useEffect(() => {\n    const projection = (\n      geoOrthographic()\n      .scale(size / 2)\n      .translate([size / 2, size / 2])\n      .clipAngle(90)\n    )\n    const path = (\n      geoPath()\n      .projection(projection)\n    )\n    const λ = (\n      scaleLinear()\n      .domain([0, size])\n      .range([-180, 180])\n    )\n    const φ = (\n      scaleLinear()\n      .domain([0, size])\n      .range([90, -90])\n    )\n    const svg = (\n      select(svgRef.current)\n      .attr('width', size)\n      .attr('height', size)\n    )\n\n    svg.append('circle')\n    .attr('r', size / 2)\n    .attr('filter', 'url(#glow)')\n\n    svg.append('circle')\n    .attr('r', size / 2)\n    .attr('fill', water)\n\n    svg.append('path')\n    .datum(feature(World, World.objects.land))\n    .attr('transform', `translate(-${size / 2}, -${size / 2})`)\n    .attr('class', 'land')\n    .attr('d', path)\n    .attr('fill', land)\n\n    const scrollSpeed = 50\n    let current = 0\n    const bgscroll = () => {\n      current += 1\n      projection.rotate([λ(current), 0])\n      svg.selectAll('path').attr('d', path)\n    }\n    setInterval(bgscroll, scrollSpeed)\n  }, [size, water, land])\n\n  return (\n    <g transform={`translate(-${size / 2} -${size / 2})`}>\n      <chakra.svg\n        ref={svgRef}\n        viewBox={[\n          -size / 2 - pad, -size / 2 - pad,\n          size + 2 * pad, size + 2 * pad,\n        ].join(' ')}\n        _hover={{\n          path: { fill: 'green' },\n          circle: { fill: 'blue' },\n        }}\n      >\n        <defs>\n          <filter id=\"glow\">\n            <feFlood\n              flood-opacity=\"0.8\"\n              flood-color=\"white\"\n              result=\"flood\"\n            />\n            <feComposite\n              in=\"flood\"\n              in2=\"SourceGraphic\"\n              operator=\"in\"\n              result=\"composite\"\n            />\n            <feGaussianBlur\n              in=\"composite\"\n              stdDeviation=\"14\"\n              result=\"blur\"\n            />\n            <feComposite\n              in=\"SourceGraphic\"\n              in2=\"blur\"\n              operator=\"over\"\n            />\n          </filter>\n        </defs>\n      </chakra.svg>\n    </g>\n  )\n}","import { chakra, Link } from '@chakra-ui/react'\nimport CircleFor from './CircleFor'\nimport Starfield from './assets/starfield.svg'\nimport Earth from './Earth'\n\nexport default ({ width = 640, height = 480 }) => {\n  const Background = () => (\n    <foreignObject\n      x={-width / 2} y={-height / 2}\n      {...{ width, height }}\n    >\n      <object\n        {...{ width, height }}\n        data={Starfield}\n        aria-label=\"background\"\n      />\n    </foreignObject>\n  )\n\n  const Text = chakra('text')\n  const Path = chakra('path')\n\n  const Player = ({\n    username, displayName = username\n  }, idx) => (\n    <Link\n      key={displayName}\n      href={\n        `//my.metagame.wtf/player/${username}`\n      }\n      _hover={{\n        path: {\n          stroke: 'red',\n        },\n        text: {\n          fill: 'yellow',\n        },\n      }}\n    >\n      <path\n        d='m-7,5 h14 l-7,-15 z'\n        fill=\"transparent\" stroke=\"purple\"\n        strokeWidth={2}\n      />\n      <Text\n        dy={19}\n        fontSize={10}\n        textAnchor=\"middle\"\n        fill=\"white\"\n        stroke=\"black\"\n        strokeWidth={1}\n        paintOrder=\"stroke\"\n      >\n        {displayName}\n      </Text>\n    </Link>\n  )\n\n  return (\n    <chakra.svg\n      viewBox={\n        `${-width / 2} ${-height / 2}`\n        + ` ${width} ${height}`\n      }\n      maxH=\"100%\" maxW=\"100%\"\n    >\n      <Background/>\n      <Earth size={275} land=\"purple\" water=\"#111\"/>\n      <CircleFor\n        id=\"players\"\n        source=\"inner-circle.json\"\n        style={{\n          fill: 'none',\n          stroke: 'lightblue',\n          strokeWidth: 2,\n          strokeDasharray: '7 5',\n          strokeLinecap: 'round',\n        }}\n        r={100}\n        template={Player}\n      />\n    </chakra.svg>\n  )\n}","//import DynamicSVG from './DynamicSVG'\nimport RaidMap from './RaidMap'\n\nexport default () => (\n  <RaidMap/>\n)","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}