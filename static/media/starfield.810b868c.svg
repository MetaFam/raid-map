<svg viewBox="0 0 640 480" xmlns="http://www.w3.org/2000/svg">
  <defs><style type="text/css">
    /* Enabling this is prettier but causes the
     * this to draw over everything when used as
     * a background.
     */
    /*.star { transition: opacity 1s }*/
  </style></defs>
  <rect fill='black' width="100%" height="100%"/>
  <g id="starfield"/>
  <script>//<![CDATA[
    // https://gist.github.com/dontpaniclabsgists/6b669a61b17f00dba9dd1d1be0786ea3#file-print_graphic_2-txt
    const stars = []
    const count = 3600
    const sizeVariance = .9
    const starSize = 0.75
    const opacityVariance = 1
    const twinkleStep = 0.15 // 50/50 chance to + or - this much
    const twinkleChance = 0.25 // probabilty of a change in brightness
    const w = 1280
    const h = 960

    const g = document.getElementById('starfield')

    for(let i = 1; i <= count; i++){
      const x = getRandomNumber(0, w)
      const y = getRandomNumber(0, h)
      const r = getRandomNumber(
        (starSize - (starSize * sizeVariance)),
        (starSize + (starSize * sizeVariance))
      )
      const o = getRandomNumber(
        (1 - opacityVariance), 1
      )
      const star = makeStar(x, y, r, o)
      stars.push(star)
      g.append(star)
    }

    function makeStar(x, y, r, o) {
      const s = document.createElementNS(
        'http://www.w3.org/2000/svg',
        'circle'
      )
      s.classList.add('star')
      s.setAttribute('cx', x)
      s.setAttribute('cy', y)
      s.setAttribute('r', r)
      s.setAttribute('fill', '#FFFFFF')
      s.setAttribute('fill-opacity', o)
      return s
    }

    function getRandomNumber(min, max){ 
      const dist = max - min
      return min + (Math.random() * dist) 
    }

    const twinkle = () => {
      stars.forEach((star) => {
        if(Math.random() <= twinkleChance) {
          let opacity = star.style.opacity
          if(opacity === '') opacity = 1
          star.style.opacity = (
            opacity + (
              (Math.random() >= 0.5 ? 1 : -1)
              * twinkleStep
            )
          )
        }
      })
    }
    setInterval(twinkle, 333) 
  //]]></script>
</svg>